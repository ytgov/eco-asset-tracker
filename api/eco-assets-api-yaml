openapi: 3.0.1
info:
  description: "An API for the asset management Yukon Government Dept of ECO "
  version: 1.0.0
  title: ECO Asset Management API
  contact:
    email: eco-itmanager@yukon.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Assets
    description: Assets that are managed by ECO

  - name: Rooms
    description: Rooms managed by ECO
  - name: Employees
    description: Employees who are assigned rooms, assets, or keys.
  - name: Keys
    description: Keys that can be assigned to employees and rooms.
  - name: Users
    description: Users who can Create or Update items in the system
paths:
  /assets:
    post:
      tags:
        - Assets
      summary: Create new asset
      description: ""
      operationId: addAsset
      requestBody:
        $ref: "#/components/requestBodies/Asset"
      responses:
        "201":
          description: Created Asset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "405":
          description: Invalid input
    put:
      tags:
        - Assets
      summary: Update an existing asset
      description: ""
      operationId: updateAsset
      requestBody:
        $ref: "#/components/requestBodies/Asset"
      responses:
        "200":
          description: Updated Asset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid ID supplied
        "404":
          description: Asset not found
        "405":
          description: Validation exception
  /asset/findByStatus:
    get:
      tags:
        - Assets
      summary: Finds Assets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findAssetssByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid status value
  /assets/findByTags:
    get:
      tags:
        - Assets
      summary: Finds Assetss by tags
      description:
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findAssetssByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid tag value
      deprecated: true
  "/assets/{assetsId}":
    get:
      tags:
        - Assets
      summary: Find assets by ID
      description: Returns a single assets
      operationId: getAssetsById
      parameters:
        - name: assetsId
          in: path
          description: ID of assets to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Asset"
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid ID supplied
        "404":
          description: Assets not found
    post:
      tags:
        - Assets
      summary: Updates a assets in the store with form data
      description: ""
      operationId: updateAssetsWithForm
      parameters:
        - name: assetsId
          in: path
          description: ID of assets that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the assets
                  type: string
                status:
                  description: Updated status of the assets
                  type: string
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
        - Assets
      summary: Deletes a assets
      description: ""
      operationId: deleteAssets
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: assetsId
          in: path
          description: Assets id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Assets not found
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns assets inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a assets
      description: ""
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: order placed for purchasing the assets
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid Order
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description:
        For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of assets that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description:
        For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://assetsstore.swagger.io/v2
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Asset:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Asset"
      description: An asset to be added to the database
      required: true
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        assetsId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Asset:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: assets status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Assets
    ApiResponse:
      type: object  
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
