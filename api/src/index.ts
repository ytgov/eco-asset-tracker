import express, { Request, Response, NextFunction, Errback } from "express";
import cors from "cors";
import path from "path";
import helmet from "helmet";
import * as config from "./config";

// import { auth } from "express-oauth2-jwt-bearer";
import { loadUser, isEditor, isSystemAdministrator } from "./middleware";
import { checkJwt } from "./middleware/authn.middleware";
import { API_PORT, FRONTEND_URL, APPLICATION_NAME } from "./config";
//z import { doHealthCheck } from "./utils/healthCheck";
// import { userRouter, authoritiesRouter, employeeRouter, departmentRouter, formARouter } from "./routes";

//import { configureLocalAuthentication } from "./routes/auth-local";
// import { RequiresData } from "./middleware";
// import { Seed } from "./data/seed";
import {
  roomsRouter,
  assetsRouter,
  employeeRouter,
  keysRouter,
  userRouter,
  systemRouter,
  configRouter,
} from "./routes";
// import { migrateLatest, migrateDown, migrateUp } from "./data/migrator";

//runMigrations();

const app = express();

app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded
// app.use(fileUpload());

app.use(checkJwt); //check for JWT token but don't require it

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "default-src": ["'self'", config.ISSUER_BASE_URL],
      "base-uri": ["'self'"],
      "block-all-mixed-content": [],
      "font-src": ["'self'", "https:", "data:"],
      "frame-ancestors": ["'self'"],
      "img-src": ["'self'", "data:"],
      "object-src": ["'none'"],
      "script-src": ["'self'", "'unsafe-eval'"],
      "script-src-attr": ["'none'"],
      "style-src": ["'self'", "https:", "'unsafe-inline'"],
    },
  })
);

// very basic CORS setup
app.use(
  cors({
    origin: FRONTEND_URL,
    optionsSuccessStatus: 200,
    credentials: true,
  })
);

app.get("/api/boo", async (req: Request, res: Response) => {
  // console.log("req.user", req?.oidc.user);

  // const url = "https://cirque.auth0.com/userinfo"; // replace with your endpoint
  // const token = req.auth?.token; // replace with your token

  // await fetch(url, {
  //   method: "GET",
  //   headers: {
  //     "Content-Type": "application/json",
  //     // Bearer token authorization
  //     Authorization: `Bearer ${token}`,
  //   },
  // })
  //   .then((response) => response.json())
  //   .then((data) => {
  //     console.log(data);
  //     req.user = data;
  //   })
  //   .catch((error) => {
  //     console.error("Error:", error);
  //   });
  res.json({ message: req?.user });
});

// app.get("/seed", RequiresData, async (req: Request, res: Response) => {
//   await Seed(req.store);
//   res.send("Complete");
// });

// app.get("/api/healthCheck", RequiresData, (req: Request, res: Response) => {
//   // app.get("/api/healthCheck",  (req: Request, res: Response) => {
//   doHealthCheck(req, res);
// });

app.use("/api/rooms", roomsRouter);
app.use("/api/assets", assetsRouter);
app.use("/api/employees", employeeRouter);
app.use("/api/keys", keysRouter);
app.use("/api/users", userRouter);
app.use("/api/system", isSystemAdministrator, systemRouter);
app.use("/api/config", configRouter);

// app.use("/api/user", userRouter);

// app.use("/api/departments", departmentRouter);
// app.use("/api/authorities", RequiresData, authoritiesRouter);

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, "web")));

if (process.env.NODE_ENV === "development") {
  // eslint-disable-next-line no-unused-vars
  app.use("/", (req, res, next) => {
    console.log("Redirecting to http://localhost:8080/");
    console.log(req.oidc.isAuthenticated());
    // if (req.oidc.isAuthenticated()) {
    //   let oidcUser = req.oidc.user;
    //   req.user = oidcUser;
    //   console.log(req.user);
    // }
    res.redirect("http://localhost:8080/");
  });
}

// last ditch route to nicely handle errors without dumping the stack
app.use(function (err: any, req: Request, res: Response, next: NextFunction) {
  res.status(err.status || 500);
  res.json({ error: err.message });
});

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, "web") + "/index.html");
});

const PORT: number = parseInt(API_PORT as string);

app.listen(PORT, async () => {
  console.log(`${APPLICATION_NAME} API listenting on port ${PORT}`);
});
